/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge10;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void testStack(){
        Stack<Integer> stack = new Stack<>();
        stack.push(10);
        assertEquals(10,stack.peek());

        stack.push(20);
        stack.push(30);
        assertEquals(30,stack.peek());

        stack.pop();
        assertEquals(20,stack.peek());

        stack.pop();
        stack.pop();
        assertEquals(null,stack.peek());

        stack.push(50);
        assertEquals(50,stack.peek());

        Stack<Integer> stack1 = new Stack<>();
        assertEquals("Stack{top=null, size=0}",stack1.toString());
        assertEquals(null,stack1.pop());
        assertEquals(null,stack1.peek());
    }

    @Test void testQueue(){
        Queue<Integer> queue = new Queue<>();
        queue.enQueue(10);
        assertEquals(10,queue.peek());

        queue.enQueue(20);
        queue.enQueue(30);
        assertEquals(3,queue.size());

        queue.deQueue();
        assertEquals(20,queue.peek());

        assertEquals(20,queue.peek());

        queue.deQueue();
        queue.deQueue();
        assertEquals(null,queue.peek());

        Queue<Integer> queue1 = new Queue<>();
        assertEquals(null,queue1.peek());

        assertEquals(null,queue.peek());
    }

    @Test void testPseudoQueue(){
        PseudoQueue<Integer> q1 = new PseudoQueue<>();
        q1.enQueue(1);
        q1.enQueue(2);
        q1.enQueue(3);
        q1.enQueue(4);

        q1.stack1.displayStack();
        System.out.println("\n");
        assertEquals(1,q1.stack1.peek());


        q1.deQueue();
        q1.stack1.displayStack();
        System.out.println("\n");
        assertEquals(2,q1.stack1.peek());
    }

    @Test void testAnimalShelter(){
        Dog dog1 = new Dog("dog1");
        Cat cat1 = new Cat("cat1");
        Dog dog2 = new Dog("dog2");
        Cat cat2 = new Cat("cat2");

        AnimalShelter animalShelter = new AnimalShelter();
        animalShelter.enQueue(dog1);
        animalShelter.enQueue(cat1);
        animalShelter.enQueue(dog2);
        animalShelter.enQueue(cat2);

        assertEquals(2,animalShelter.dogQueue.size());

        assertEquals(2,animalShelter.catQueue.size());

        animalShelter.deQueue("dog");
        assertEquals(1,animalShelter.dogQueue.size());
        animalShelter.deQueue("cat");
        animalShelter.deQueue("cat");
        assertEquals(0,animalShelter.catQueue.size());
        assertEquals(null,animalShelter.deQueue("potato"));
        assertEquals(null,animalShelter.deQueue("cat"));

    }

    @Test void binarySearchTree(){
        BinarySearchTree tree = new BinarySearchTree();
        assertNotNull(tree);

        tree.root = new NodeT(1);
        assertNotNull(tree.root);

        tree.root.left = new NodeT(2);
        assertNotNull(tree.root.left);
        tree.root.right = new NodeT(3);
        assertNotNull(tree.root.right);


        tree.preOrder(tree.root);
        System.out.println("\n");
        tree.inOrder(tree.root);
        System.out.println("\n");
        tree.postOrder(tree.root);
        System.out.println("\n");
    }

    @Test void max(){
        BinarySearchTree tree = new BinarySearchTree();
        tree.root = new NodeT(10);
        tree.root.left = new NodeT(22);
        tree.root.right = new NodeT(0);
        tree.root.left.left = new NodeT(39);
        tree.root.left.left.left = new NodeT(69);
        tree.root.left.right = new NodeT(1);
        tree.root.left.right.right = new NodeT(7);
        assertEquals(69,tree.findMax());
    }

    @Test void bfs(){
        BinaryTree tree = new BinaryTree();
        tree.root = new NodeT(10);
        tree.root.left = new NodeT(22);
        tree.root.left.right = new NodeT(69);
        tree.root.right = new NodeT(0);
        tree.root.left.left = new NodeT(39);
        ArrayList<Integer> list =new ArrayList<>();
        list.add(10);
        list.add(22);
        list.add(0);
        list.add(39);
        list.add(69);
        System.out.println(tree.breadthFirst(tree));
        assertEquals(list,tree.breadthFirst(tree));
    }

    @Test void brackets(){
        String str = "{}{Code}[Fellows](())";
        String str1 = "{";
        String str2 = ")";
        String str3 = "[}";
        String str4 = "()[[Extra Characters]]";
        Brackets bracket = new Brackets();

        assertTrue(bracket.validateBrackets(str));
        assertFalse(bracket.validateBrackets(str1));
        assertFalse(bracket.validateBrackets(str2));
        assertFalse(bracket.validateBrackets(str3));
        assertTrue(bracket.validateBrackets(str4));
    }

    @Test void kary(){
        K_Ary<Integer> tree1 = new K_Ary<>();
        tree1.root = new NodeK<>(10);
        tree1.root.child.add(new NodeK<>(2));
        tree1.root.child.add(new NodeK<>(30));
        tree1.root.child.add(new NodeK<>(56));
        tree1.root.child.add(new NodeK<>(100));
        tree1.root.child.get(0).child.add(new NodeK<>(77));
        tree1.root.child.get(0).child.add(new NodeK<>(88));
        tree1.root.child.get(2).child.add(new NodeK<>(1));
        tree1.root.child.get(3).child.add(new NodeK<>(7));
        tree1.root.child.get(3).child.add(new NodeK<>(8));
        tree1.root.child.get(3).child.add(new NodeK<>(9));
        tree1.fizzBuzzTree(tree1);
    }
}
