/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Challenge10;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void testStack(){
        Stack<Integer> stack = new Stack<>();
        stack.push(10);
        assertEquals(10,stack.peek());

        stack.push(20);
        stack.push(30);
        assertEquals(30,stack.peek());

        stack.pop();
        assertEquals(20,stack.peek());

        stack.pop();
        stack.pop();
        assertEquals(null,stack.peek());

        stack.push(50);
        assertEquals(50,stack.peek());

        Stack<Integer> stack1 = new Stack<>();
        assertEquals("Stack{top=null, size=0}",stack1.toString());
        assertEquals(null,stack1.pop());
        assertEquals(null,stack1.peek());
    }

    @Test void testQueue(){
        Queue<Integer> queue = new Queue<>();
        queue.enQueue(10);
        assertEquals(10,queue.peek());

        queue.enQueue(20);
        queue.enQueue(30);
        assertEquals(3,queue.size());

        queue.deQueue();
        assertEquals(20,queue.peek());

        assertEquals(20,queue.peek());

        queue.deQueue();
        queue.deQueue();
        assertEquals(null,queue.peek());

        Queue<Integer> queue1 = new Queue<>();
        assertEquals(null,queue1.peek());

        assertEquals(null,queue.peek());
    }

    @Test void testPseudoQueue(){
        PseudoQueue<Integer> q1 = new PseudoQueue<>();
        q1.enQueue(1);
        q1.enQueue(2);
        q1.enQueue(3);
        q1.enQueue(4);

        q1.stack1.displayStack();
        System.out.println("\n");
        assertEquals(1,q1.stack1.peek());


        q1.deQueue();
        q1.stack1.displayStack();
        System.out.println("\n");
        assertEquals(2,q1.stack1.peek());
    }


    @Test void testAnimalShelter(){
        Dog dog1 = new Dog("dog1");
        Cat cat1 = new Cat("cat1");
        Dog dog2 = new Dog("dog2");
        Cat cat2 = new Cat("cat2");

        AnimalShelter animalShelter = new AnimalShelter();
        animalShelter.enQueue(dog1);
        animalShelter.enQueue(cat1);
        animalShelter.enQueue(dog2);
        animalShelter.enQueue(cat2);



        assertEquals(2,animalShelter.dogQueue.size());


        assertEquals(2,animalShelter.catQueue.size());

        animalShelter.deQueue("dog");
        assertEquals(1,animalShelter.dogQueue.size());
        animalShelter.deQueue("cat");
        animalShelter.deQueue("cat");
        assertEquals(0,animalShelter.catQueue.size());
        assertEquals(null,animalShelter.deQueue("potato"));
        assertEquals(null,animalShelter.deQueue("cat"));



    }
}
